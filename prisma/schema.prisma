// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This Folder represent as Model folder as well.

// The following notes explaining the relation between some schema:-
/**
 * -The relation between Admin and  Product is one-to-many relation.
 * -The relation between Category and  Product is one-to-many relation.
 * -The relation between Category and  Stock is one-to-one relation.
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth
model Login {
  id        String   @id @default(uuid())
  userId    String
  userType  String
  createdAt DateTime @default(now())
}

model Logout {
  id        String   @id @default(uuid())
  userId    String
  userType  String
  createdAt DateTime @default(now())
}

model Register {
  email           String @unique
  name            String
  password        String
  confirmPassword String
}

// Types of Users

// Admin 
model Admin {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String
  createdAt    DateTime   @default(now())
  role         String
  refreshToken String?    @db.Text
  products     Product[]
  categories   Category[]
  stocks       Stock[]
  Colors       Colors[]
}

// Customer
model Customer {
  id               String          @id @default(uuid())
  name             String
  email            String          @unique
  password         String
  createdAt        DateTime        @default(now())
  role             String
  refreshToken     String?         @db.Text
  stripeCustomerId String?
  ratings          Rating[]
  wishlist         WishlistItems[]
  Cart             Cart?
  address          Address[]
  Order            Order[]
  savedCard        savedCard[]
}

// Product
model Product {
  id          Int             @id @default(autoincrement())
  name        String
  price       Float
  description String?
  thumbnail   String
  images      ProductImages[]
  qty         Int

  colors Colors[] @relation("ProductColors")

  sizes Sizes[] @relation("ProductSizes")

  ratings Rating[] @relation("ProductRatings")

  wishlist WishlistItems[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  owner     Admin      @relation(fields: [ownerId], references: [id])
  ownerId   String
  cartItems CartItem[]
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

// Colors
model Colors {
  id   Int    @id @default(autoincrement())
  name String
  code String

  products Product[] @relation("ProductColors")

  owner   Admin  @relation(fields: [ownerId], references: [id])
  ownerId String
}

// Sizes
model Sizes {
  id       Int       @id @default(autoincrement())
  code     String
  name     String
  products Product[] @relation("ProductSizes")
}

// Rates
model Rating {
  id        Int      @id @default(autoincrement())
  score     Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(name: "ProductRatings", fields: [productId], references: [id])
  productId Int

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
}

// Category
model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  products Product[]

  stock Stock?

  owner   Admin  @relation(fields: [ownerId], references: [id])
  ownerId String
}

// Stock
model Stock {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @unique

  owner   Admin  @relation(fields: [ownerId], references: [id])
  ownerId String
}

// wishlist
model WishlistItems {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  @@unique([customerId, productId])
}

// Cart
model Cart {
  id         Int        @id @default(autoincrement())
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  items      CartItem[]
}

// cartItem contains product with qty and total price of it 
model CartItem {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  quantity  Int

  size  String
  color String
}

// Address of customer
model Address {
  id          Int      @id @default(autoincrement())
  addressType String
  street      String
  city        String
  zipCode     Int
  country     String
  default     Boolean  @default(false)
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
}

// Cards of customers
enum CardType {
  VISA
  MASTERCARD
}

model savedCard {
  id                    Int      @id @default(autoincrement())
  brand                 String
  last4                 String
  holderName            String
  isDefault             Boolean  @default(false)
  customer              Customer @relation(fields: [customerId], references: [id])
  customerId            String
  stripePaymentMethodId String
  expiryMonth           Int
  expiryYear            Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([customerId, stripePaymentMethodId])
  @@index([customerId])
}

enum OrderType {
  processing
  accepted    
}

model Order {
  id                    Int         @id @default(autoincrement())
  customer              Customer    @relation(fields: [customerId], references: [id])
  customerId            String
  stripePaymentIntentId String?
  total                 Int
  currency              String
  status                OrderType
  orderItems            OrderItem[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   Int
  productId Int
  name      String
  image     String
  color     String
  size      String
  quantity  Int
  price     Int
}
